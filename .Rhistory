class(v_2)
#Split a string on a particular character; returns a two element vector
u_2 <- strsplit(u,"D")
u_2
u_2[1] #prints the first element of the vector
#Concatenate strings
paste("A","B")#combines the two strings with a space separating
paste0("A","B")#combines the two strings without a space separating
#Change the case of a string
tolower(u)
toupper("hello")
#Five less than seven?
5 < 7
#Eight more than 2?
8 > 2
#7 less than or equal to 5
7<=5
#2 more than or equal to 2
2 >= 2
#Is a the same as b
a <- "Hello"
b <- "Goodbye"
a == b
#Is a not equal to b
a != b
#Does a equal Hello, or b equal Dog?
(a == "Hello") | (b == "Dog") #returns true because one side of the OR (|) operator is true
#Does a equal Hello and b equal Dog?
(a == "Hello") & (b == "Dog") #returns false because both sides of the AND (|) operator are not true
a <- 10
b <- 15
if(a > b) {#Tests if a is greater than b (it isn't, so returns false)
a * 10 #this statement would be run only if the if had evaluated true
} else { #the else condition is run because the if statement evaluated as false
a * 20
}
ls()
#Save an image
save.image("Practical_1.RData")
#Load an image
load("Practical_1.RData")
Sys.setenv(LANGUAGE = 'en')
sdjk
Sys.setenv(LANGUAGE = 'cn')
nsdk
#Create two vectors
a <- rep(2010:2017, each = 4) # this uses the rep() function to repeat values
b <- round(runif(32, 0, 40)) # runif can be used to generate random numbers - in this case between 0 and 40
#Create data frame
c <- data.frame(a,b)
View(c)
#head returns the top six rows
head(c)
#Create a list of numbers
a <- 1:25 #The colon signifies a range
a
#Multiply b by 10
b*10
#Multiply b * b
b*b
#Extract first row
b[1,]
#Create a list of numbers
a <- 1:25 #The colon signifies a range
a
#Create a matrix with 5 rows and 5 columns
b <- matrix(a,nrow=5, ncol=5)
b
#Extract first row
b[1,]
#Extract fourth column
b[,4]
#Extract third and fourth columns
b[,3:4] # The colon is used to define a numeric vector between the two numbers
#Extract first and fourth rows
b[c(1,5),] # The c() is used to create a numeric vector with the numbers separated by a comma
#Extract the value in the third row and fourth column
b[3,4]
#Return all the values in the column called "a"
c$a
#A different way of returning the column called "a"
c[,"a"]
#Return all the values in the column called "a"
d<-c$a
#A different way of returning the column called "a"
c[,"a"]
#Return all the values in the column called "a"
d<-c$a
d
#A different way of returning the column called "a"
c[,"a"]
colnames(c)
colnames(c)
#Read CSV file - creates a data frame called earnings
earnings <- read.csv("./data/ACS_14_5YR_S2001_with_ann.csv")
#Show column headings
colnames(earnings)
#UID - Tract ID
#pop - estimated total population over 16 with income
#pop_m - estimated total population over 16 with income (margin of error)
#earnings - estimated median earnings
#earnings - estimated median earnings (margin of error)
str(earnings)
#Download and install package (make sure that you also have java installed - https://www.java.com/en/download/installed.jsp)
install.packages("readxl")
#Load package
library(readxl)
#Read the Data sheet from the Excel workbook
cycle_hire <- read_excel("./data/tfl-daily-cycle-hires.xlsx", sheet = "Data")
#Download and install package
install.packages("rgdal")
#Load package
library(rgdal)
# Read Shapefile
SF <- readOGR(dsn = "./data", layer = "tl_2010_06075_tract10")
plot(SF)
#. The slotNames() function prints their names.
slotNames(SF)
#Show the top rows of the data object
head(SF@data)
# Read csv into R
data_311 <- read.csv("./data/311.csv")
# Read csv into R
data_311 <- read.csv("./data/311.csv")
# Read csv into R
data_311 <- read.csv("./data/311.csv")
# Have a look at the structure
head(data_311)
# Create the SpatialPointsDataFrame
SP_311 <- SpatialPointsDataFrame(coords = data.frame(data_311$Lon, data_311$Lat), data = data.frame(data_311$CaseID,data_311$Category), proj4string = SF@proj4string)
# Show the results
plot(SP_311)
#Create a table of frequencies by the categories used within the 311 data
table(data_311$Category)
# Use the subset() function to extract rows from the data which relate to Sewer Issues
sewer_issues <- subset(data_311,Category == "Sewer Issues")
# Use the square brackets "[]" to perform the same task
sewer_issues <- data_311[data_311$Category == "Sewer Issues",]
# Extract a list of IDs for the "Sewer Issues"
sewer_issues_IDs <- subset(data_311,Category == "Sewer Issues", select = "CaseID")
plot(SF[SF@data$GEOID10 != "06075980401",]) # Removes Farallon Islands from the plot
plot(SF[SF@data$GEOID10 == "06075980401",]) # Only plots Farallon Islands
SF <- SF[SF@data$GEOID10 != "06075980401",] # Overwrites the SF object
SF <- SF[SF@data$GEOID10 != "06075980401",] # Overwrites the SF object
#Download and install package 'raster', 'rgeos', and 'spatialEco'
install.packages("raster")
install.packages("rgeos")
install.packages("spatialEco")
#Load library
library("raster")
library("rgeos")
#Read in coastal outline (Source from - https://www.census.gov/geo/maps-data/data/cbf/cbf_counties.html)
coast <- readOGR(dsn = "./data", layer = "cb_2015_us_county_500k")
SF_clipped <- crop(SF, coast) # Clip the the SF spatial data frame object to the coastline
#Plot the results
plot(SF_clipped)
SF
#. The slotNames() function prints their names.
slotNames(SF)
library(spatialEco)
SP_311_PIP <- point.in.poly(SP_311, coast) # Clip the the 331 points data object to the coastline
plot(SP_311_PIP)
#Read CSV file - creates a data frame called earnings
bachelors <- read.csv("./data/ACS_14_5YR_S1501_with_ann.csv")
#UID - Tract ID
#Bachelor_Higher - Bachelor degree or higher %
#Bachelor_Higher_m - Bachelor degree or higher % (margin of error)
#Perform the merge
SF_Tract_ACS <- merge(x=earnings,y=bachelors,by.x="UID",by.y="UID")
SF_Tract_ACS <- merge(earnings,bachelors,by="UID")# An alternative method to the above, but a shortened version as the ID columns are the same on both tables
#You can also use all.x=TRUE (or all.y=TRUE) to keep all the rows from either the x or y table - for more details type ?merge()
#The combined table now looks like
head(SF_Tract_ACS) # shows the top of the table
#Remind yourself what the data look like...
head(SF_clipped@data)
SF_clipped@data <- data.frame(SF_clipped@data[,"GEOID10"]) #Makes a new version of the @data slot with just the values of the GEOID10 column - this is wrapped with the data.frame() function
#The data frame within the data slot now looks as follows
head(SF_clipped)
colnames(SF_clipped@data) <- "GEOID10" #Update column names
head(SF_clipped@data) #Check the updated values
head(SF_Tract_ACS) # show the top of the SF_Tract_ACS object
# Creates a new variable with a leading zero
SF_Tract_ACS$GEOID10 <- paste0("0",SF_Tract_ACS$UID)
head(SF_Tract_ACS)
str(SF_Tract_ACS)
SF_Tract_ACS$UID <- NULL
#Replace the "-" and "*" characters (If you are doing this outside of the US / UK and have a non English locale set, try running Sys.setlocale("LC_ALL","English") before using gsub)
SF_Tract_ACS$earnings <- gsub("-",NA,SF_Tract_ACS$earnings,fixed=TRUE) #replace the "-" values with NA
SF_Tract_ACS$earnings_m <- gsub("**",NA,SF_Tract_ACS$earnings_m,fixed=TRUE) #replace the "**" values with NA
SF_Tract_ACS$Bachelor_Higher <- gsub("-",NA,SF_Tract_ACS$Bachelor_Higher,fixed=TRUE) #replace the "-" values with NA
SF_Tract_ACS$Bachelor_Higher_m <- gsub("**",NA,SF_Tract_ACS$Bachelor_Higher_m,fixed=TRUE) #replace the "**" values with NA
SF_Tract_ACS$earnings <- as.numeric(SF_Tract_ACS$earnings)
SF_Tract_ACS$earnings_m <- as.numeric(SF_Tract_ACS$earnings_m)
SF_Tract_ACS$Bachelor_Higher <- as.numeric(SF_Tract_ACS$Bachelor_Higher)
SF_Tract_ACS$Bachelor_Higher_m <- as.numeric(SF_Tract_ACS$Bachelor_Higher_m )
str(SF_Tract_ACS)
SF_clipped <- merge(SF_clipped,SF_Tract_ACS, by="GEOID10") # merge
head(SF_clipped@data)#show the attribute data
plot(SP_311_PIP)
SP_311_PIP@data <- data.frame(SP_311_PIP@data[,"data_311.Category"])#subset data
colnames(SP_311_PIP@data) <- "Category" #update column names
SF_clipped_311 <- point.in.poly(SP_311_PIP, SF) # point in polygon
#Cleanup the attributes
SF_clipped_311@data <- SF_clipped_311@data[,c("GEOID10","Category")] #note that we don't need to use the data.frame() function as we are keeping more than one column
#Show the top rows of the data
head(SF_clipped_311@data)
#In this example we write out a CSV file from the data slot of the SpatialPointsDataFrame SF_clipped_311
write.csv(SF_clipped_311@data,"311_Tract_Coded.csv")
#This will write out a Shapefile for San Francisco - note, a warning is returned as the column names are a little longer than are allowed within a Shapefile and as such are automatically shortened.
writeOGR(SF_clipped, ".", "SF_clipped", driver="ESRI Shapefile")
# Read csv into R
data_311 <- read.csv("./data/311.csv")
# Have a look at the structure
head(data_311)
# Create the SpatialPointsDataFrame
SP_311 <- SpatialPointsDataFrame(coords = data.frame(data_311$Lon, data_311$Lat), data = data.frame(data_311$CaseID,data_311$Category), proj4string = SF@proj4string)
# Show the results
plot(SP_311)
?SpatialGridDataFrame
# Read in CSV
hk <- read.csv("./data/listings.csv")
# Read in CSV
hk <- read.csv("./data/listings.csv")
# Read in CSV
hk <- read.csv("./data/listings.csv")
View(hk)
# Subset data
hk <- subset(hk, select = c("id","neighbourhood_cleansed","latitude","longitude","property_type","room_type","bedrooms","price","number_of_reviews"))
head(hk)
colnames(hk)
# Clean the price data to remove $ and , then convert to numeric (If you are doing this outside of the US / UK and have a non English locale set, try running Sys.setlocale("LC_ALL","English") before using gsub)
hk$price <- gsub("$","",hk$price,fixed = TRUE)
hk$price <- gsub(",","",hk$price,fixed = TRUE)
hk$price <- as.numeric(as.character(hk$price))
#Remove any records that are not complete
hk <- hk[complete.cases(hk),]
# Show the top six rows
head(hk)
# Clean the price data to remove $ and , then convert to numeric (If you are doing this outside of the US / UK and have a non English locale set, try running Sys.setlocale("LC_ALL","English") before using gsub)
hk$price <- gsub("$","",hk$price,fixed = TRUE)
hk$price <- gsub(",","",hk$price,fixed = TRUE)
hk$price <- as.numeric(as.character(hk$price))
#Remove any records that are not complete
hk <- hk[complete.cases(hk),]
# Show the top six rows
hk
# Read in CSV
hk <- read.csv("./data/listings.csv")
# Subset data
hk <- subset(hk, select = c("id","neighbourhood_cleansed","latitude","longitude","property_type","room_type","bedrooms","price","number_of_reviews"))
head(hk)
# Clean the price data to remove $ and , then convert to numeric (If you are doing this outside of the US / UK and have a non English locale set, try running Sys.setlocale("LC_ALL","English") before using gsub)
hk$price <- gsub("$","",hk$price,fixed = TRUE)
hk$price <- gsub(",","",hk$price,fixed = TRUE)
hk$price <- as.numeric(as.character(hk$price))
#Remove any records that are not complete
hk <- hk[complete.cases(hk),]
# Show the top six rows
hk
?complete.cases
# Clean the price data to remove $ and , then convert to numeric (If you are doing this outside of the US / UK and have a non English locale set, try running Sys.setlocale("LC_ALL","English") before using gsub)
hk$price <- gsub("$","",hk$price,fixed = TRUE)
hk$price <- gsub(",","",hk$price,fixed = TRUE)
hk$price <- as.numeric(as.character(hk$price))
#Remove any records that are not complete
hk <- hk[!complete.cases(hk),]
# Show the top six rows
hk
?complete.cases
View(hk)
# Clean the price data to remove $ and , then convert to numeric (If you are doing this outside of the US / UK and have a non English locale set, try running Sys.setlocale("LC_ALL","English") before using gsub)
hk$price <- gsub("$","",hk$price,fixed = TRUE)
hk$price <- gsub(",","",hk$price,fixed = TRUE)
hk$price <- as.numeric(as.character(hk$price))
#Remove any records that are not complete
hk <- hk[complete.cases(hk),]
# Show the top six rows
hk
?complete.cases
# Read in CSV
hk <- read.csv("./data/listings.csv")
colnames(hk)
# Read in CSV
hk <- read.csv("./data/listings.csv")
# Subset data
hk <- subset(hk, select = c("id","neighbourhood_cleansed","latitude","longitude","property_type","room_type","bedrooms","price","number_of_reviews"))
head(hk)
# Clean the price data to remove $ and , then convert to numeric (If you are doing this outside of the US / UK and have a non English locale set, try running Sys.setlocale("LC_ALL","English") before using gsub)
hk$price <- gsub("$","",hk$price,fixed = TRUE)
hk$price <- gsub(",","",hk$price,fixed = TRUE)
hk$price <- as.numeric(as.character(hk$price))
#Remove any records that are not complete
hk <- hk[complete.cases(hk),]
# Show the top six rows
hk
?complete.cases
#Summary
summary(hk)
#Download required packages
install.packages("RCurl")
install.packages("RJSONIO")
install.packages("devtools")
# Devtools enables packages to be loaded from github
library(devtools)
# Install CatoDB package
install_github("alexsingleton/cartodb-r", subdir = "CartoDB")
# Load package
library(CartoDB)
cartodb.test()
# Connects R to Carto
#cartodb("urbananalytics", api.key="optional-key-for-writes") #optional API key
# Connect to your Carto instance - change the name in the "" to your account name
cartodb("zhoumaneo")
cartodb.test()
cartodb("zhoumaneo", api.key="fb070799acad21d626b5ade94caa3542b7decd88")
#
#Download the top ten rows of the table "brooklyn_trees"
tmp <- cartodb.collection("brooklyn_trees", geomAs="XY", limit=10)
tmp
tmp
#Same query, but supplied as a formal SQL query
tmp <- cartodb.collection(sql="SELECT cartodb_id, the_geom, tree_speci, serial FROM brooklyn_trees LIMIT 10")
tmp
tmp
#Same query, but supplied as a formal SQL query
tmp <- cartodb.collection(sql="SELECT cartodb_id,  ST_AsText(the_geom), ST_X(the_geom) AS Lon, ST_Y(the_geom) AS Lat, tree_speci, serial FROM brooklyn_trees LIMIT 10")
tmp
View(tmp)
View(hk)
View(tmp)
#Get the GeoJSON
zones <- cartodb.collection("brooklyn_neigh_tab",columns=c("cartodb_id","the_geom"),method="GeoJSON")
#Create a SpatialPolygonsDataFrame obect
zones.SP <-readOGR(zones,layer = 'OGRGeoJSON',verbose =FALSE) #The "verbose = FALSE" stops readOGR printing the content of the geoJSON to the R console
library(rgdal)
#Get the GeoJSON
zones <- cartodb.collection("brooklyn_neigh_tab",columns=c("cartodb_id","the_geom"),method="GeoJSON")
#Create a SpatialPolygonsDataFrame obect
zones.SP <-readOGR(zones,layer = 'OGRGeoJSON',verbose =FALSE) #The "verbose = FALSE" stops readOGR printing the content of the geoJSON to the R console
#Plot the zones
plot(zones.SP)
View(zones.SP)
# Return the areas of polygons
test<- cartodb.collection(sql="SELECT cartodb_id, ntaname, ST_Area(the_geom::geography) / 1000000 AS Area_KM FROM brooklyn_neigh_tab")
View(test)
#Return the centroid of the polygons
test <- cartodb.collection(sql="SELECT cartodb_id, ntaname, ST_Centroid(the_geom) as the_geom FROM brooklyn_neigh_tab",method="GeoJSON")
# Plot the results
plot(readOGR(test,layer = 'OGRGeoJSON',verbose =FALSE))
#Return buffers
buffers <- cartodb.collection(sql="SELECT cartodb_id,  ST_Buffer(the_geom::geography,200) as the_geom FROM brooklyn_trees WHERE tree_speci = 'Green Ash'",method="GeoJSON")
# Plot the results
buffers.SP <- readOGR(buffers,layer = 'OGRGeoJSON',verbose =FALSE)
#Plot first 100 tree buffers
plot(buffers.SP[1:100,])
# Return intersection of stations with Brooklyn neighborhoods
intersection_stations <- cartodb.collection(sql="SELECT a.*,b.ntaname FROM subway_stations AS a, brooklyn_neigh_tab AS b WHERE ST_Intersects(a.the_geom, b.the_geom)",method="GeoJSON") # b.ntaname is added to the select statement to append the neighbouhood names that the stations are located within
# Plot the results
intersection_stations.SP <- readOGR(intersection_stations,layer = 'OGRGeoJSON',verbose =FALSE)
plot(intersection_stations.SP)
#We can also see how each of the stations now have the neighborhood appended
head(intersection_stations.SP@data)
# Write the query to Carto
cartodb.collection(sql="CREATE TABLE subway_stations_brooklyn AS SELECT a.* FROM subway_stations AS a, brooklyn_neigh_tab AS b WHERE ST_Intersects(a.the_geom, b.the_geom)")
# In order to make the table visible on the datasets page, this statement is also required
cartodb.collection(sql="select cdb_cartodbfytable('subway_stations_brooklyn')")
# Return intersection of stations with Brooklyn neighborhoods
intersection_lines <- cartodb.collection(sql="SELECT a.* FROM subway a, brooklyn_neigh_tab b WHERE ST_Intersects(a.the_geom, b.the_geom)",method="GeoJSON")
# Plot the results
intersection_lines.SP <- readOGR(intersection_lines,layer = 'OGRGeoJSON',verbose =FALSE)
plot(intersection_lines.SP)
# Return intersection of stations with Brooklyn neighborhoods
lines <- cartodb.collection(sql="SELECT * FROM subway",method="GeoJSON")
# Plot the results
lines.SP <- readOGR(lines,layer = 'OGRGeoJSON',verbose =FALSE)
plot(lines.SP)
plot(zones.SP, col="#24478f4D", border = NA, add=TRUE)
plot(intersection_lines.SP,col="red", add=TRUE)
distance_station <- cartodb.collection(sql="SELECT name, ST_Distance(the_geom::geography, ST_SetSRID(ST_Point(-73.9365832, 40.7042924),4326)::geography) as distance FROM subway_stations_brooklyn ORDER BY distance")
#Show the closest six subway stations
head(distance_station)
census <- read.csv("./data/census_small.csv")
census <- read.csv("./data/census_small.csv")
View(census)
head(census)
summary(census)
#Historgram
hist(census$PCT_Good_Health, col="#00bfff", xlab="Percent", main="Histogram")
plot(census$PCT_Good_Health,census$PCT_Social_Rented_Households,cex=.7,main="Good Health and Social Housing", xlab="% Good Health",ylab="% Social Housing",col="#00bfff",pch=19)
View(census)
mean(census$PCT_Good_Health)
census$PCT_Good_Health < mean(census$PCT_Good_Health)
head(census)
summary(census)
#Historgram
hist(census$PCT_Good_Health, col="#00bfff", xlab="Percent", main="Histogram")
plot(census$PCT_Good_Health,census$PCT_Social_Rented_Households,cex=.7,main="Good Health and Social Housing", xlab="% Good Health",ylab="% Social Housing",col="#00bfff",pch=19)
mean(census$PCT_Good_Health)
census$PCT_Good_Health < mean(census$PCT_Good_Health)
# Calculate a target for PCT in good health
census$target <- ifelse(census$PCT_Good_Health < mean(census$PCT_Good_Health),"Yes","No")
# Calculate a target for PCT social housing
census$target2 <- ifelse(census$PCT_Social_Rented_Households < mean(census$PCT_Social_Rented_Households),"Yes","No")
head(census)
barplot(counts, main="Target Distribution", xlab="Target",col="#00bfff")
#Create a table of the results
counts <- table(census$target)
barplot(counts, main="Target Distribution", xlab="Target",col="#00bfff")
#Create a table of the results
counts <- table(census$target, census$target2)
#Create stacked bar chart
barplot(counts, main="Target Distribution", xlab="Target",col=c("#00bfff","#00cc66"),legend = rownames(counts))
#Create side by side bar chart
barplot(counts, main="Target Distribution", xlab="Target",col=c("#00bfff","#00cc66"),legend = rownames(counts),beside=TRUE)
#Read data
racial <- read.csv("./data/NYC_Pop.csv")
#Create a plot for the total population without an x-axis label
plot(racial$Population,type = "o", col = "red", xlab = "Year", ylab = "Population", main = "Population over time",xaxt = "n")
# Add axis label
axis(1, at=1:5, labels=racial$Year)
plot(cars)
getwd()
setwd('/Users/afen/Documents/GitHub/WIFI_hotspot_analysis_based_NYC')
getwd()
wifi_data <- read.csv('./data/NYC_Free_Public_WiFi_03292017.csv')
head(wifi_data)
View(wifi_data)
names(wifi_data)
wifi_data <- subset(wifi_data,select = c("the_geom","TYPE","PROVIDER","LAT","LOCATION","LON","X","Y","BORONAME"))
head(wifi_data)
library(ggplot2)
qplot(TYPE,data = wifi_data,geom = "bar")
qplot(PROVIDER,data = wifi_data,geom = "bar")
qplot(PROVIDER,data = wifi_data,geom = "bar",colour = TYPE)
qplot(PROVIDER,data = wifi_data,colour = TYPE)
qplot(PROVIDER,data = wifi_data,geom = "points",colour = TYPE)
qplot(PROVIDER,data = wifi_data,geom = "point",colour = TYPE)
qplot(PROVIDER,data = wifi_data,geom = "bar",colour = TYP)
qplot(PROVIDER,data = wifi_data,geom = "bar",colour = TYPE)
wifi_pro <- ggplot(wifi_data,aes(PROVIDER))
wifi_pro + geom_bar()
wifi_pro + geom_bar(aes(fill=TYPE))
wifi_pro + geom_bar(aes(fill=TYPE)) + xlab("")
wifi_pro + geom_bar(aes(fill=TYPE)) + xlab(" ")
wifi_pro + geom_bar(aes(fill=TYPE)) + xlab("ss ")
wifi_pro + geom_bar(aes(fill=TYPE))
wifi_pro + geom_bar(aes(fill=TYPE)) + theme(axis.title.x = element_text(angle = 90))
library(scales)
wifi_pro + geom_bar(aes(fill=TYPE)) +scale_x_discrete(breaks=colnames(PROVIDER))
wifi_pro <- ggplot(wifi_data,aes(PROVIDER))
wifi_pro
wifi_pro <- geom_bar + par(las=2)
wifi_pro <- geom_bar + theme(axis.title.x = element_text(angle = 90))
wifi_pro <- ggplot(wifi_data,aes(PROVIDER))
wifi_pro + geom_bar + theme(axis.title.x = element_text(angle = 90))
wifi_pro + geom_bar() + theme(axis.title.x = element_text(angle = 90))
wifi_pro + geom_bar() + theme(text = element_text,axis.title.x = element_text(angle = 90))
wifi_pro + geom_bar() + theme(text = wifi_data$PROVIDER,axis.title.x = wifi_data$PROVIDER(angle = 90))
wifi_pro + geom_bar() + theme(axis.text.x = element_text(colour="grey20",size=20,angle=90,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar() + theme(axis.text.x = element_text(colour="grey20",angle=90,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar() + theme(axis.text.x = element_text(colour="grey20",angle=270,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar() + theme(axis.text.x = element_text(colour="grey20",angle=90,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar() + theme(axis.text.x = element_text(colour="grey20",angle=180,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar() + theme(axis.text.x = element_text(colour="grey20",angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar() + theme(axis.text.x = element_text(colour="grey20",size = 10,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar() + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar() + theme(axis.text.x = element_text(colour=TPYE,size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar() + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar(aes(fill=TYPE)) + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar(aes(fill=TYPE)) + scale_fill_brewer(palette = "Blues") + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar(aes(fill=TYPE)) + scale_colour_brewer(palette = "Blues") + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar(aes(fill=TYPE)) + scale_colour_brewer(palette = "Set1") + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar(aes(fill=TYPE)) + scale_fill_brewer() + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar(aes(fill=TYPE)) + scale_fill_brewer(direction = -1) + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar(aes(fill=TYPE)) + scale_fill_brewer(direction = -1,palette = "Green") + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar(aes(fill=TYPE)) + scale_fill_brewer(direction = -1,palette = "red") + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar(aes(fill=TYPE)) + scale_fill_brewer(direction = -1,palette = "Red") + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_pro + geom_bar(aes(fill=TYPE)) + scale_fill_brewer(direction = -1,palette = "Green") + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_data + geom_bar(aes(fill=BORONAME)) + scale_fill_brewer(direction = -1,palette = "Green") + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_data + geom_bar(aes(fill=BORONAME)) + scale_fill_brewer(direction = -1,palette = "Green") + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_boro + geom_bar(aes(fill=BORONAME)) + scale_fill_brewer(direction = -1,palette = "Green") + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_boro <- ggplot(wifi_data,aes(BORONAME))
wifi_boro + geom_bar(aes(fill=BORONAME)) + scale_fill_brewer(direction = -1,palette = "Green") + theme(axis.text.x = element_text(colour="grey20",size = 5,angle=45,hjust=.5,vjust=.5,face="plain"))
wifi_boro + geom_bar(aes(fill=BORONAME)) + scale_fill_brewer(direction = -1,palette = "Green")
wifi_boro + geom_bar(aes(fill=BORONAME))
wifi_boro + geom_bar(aes(fill=count(BORONAME)))
wifi_boro + geom_bar(aes(fill=state("bin")))
wifi_boro + geom_bar(aes(fill=y))
wifi_boro + geom_bar(aes(fill=state_count(BORONAME)))
wifi_boro + geom_bar()
wifi_boro + geom_bar()+scale_fill_brewer()
wifi_boro + geom_bar()+scale_fill_brewer(palette = "Green")
wifi_boro + geom_bar(aes(stat="count"))
wifi_boro + geom_bar(aes(stat="count")) + scale_fill_brewer(palette = "Green")
wifi_boro + geom_bar(aes(yval)) + scale_fill_brewer(palette = "Green")
wifi_boro + geom_bar(aes(yval)) + scale_fill_brewer(palette = "Green")
wifi_boro + geom_bar(aes(y)) + scale_fill_brewer(palette = "Green")
wifi_boro + geom_bar(aes(count.fields(BORONAME))) + scale_fill_brewer(palette = "Green")
wifi_boro + geom_bar(aes(fill="Green"))
wifi_boro + geom_bar(aes())
wifi_boro + geom_bar()
wifi_boro + geom_bar(aes(fill=stat.count(BORONAME)))
wifi_boro + geom_bar(aes(fill=stat_bin(BORONAME)))
wifi_boro + geom_bar(aes(fill=stat_bin(BORONAME)))
wifi_boro + geom_bar()
summary(wifi_data)
wifi_boro + geom_bar(fill=aes(TYPE))
wifi_boro + geom_bar(aes(fill=stat_bin(BORONAME)))
wifi_boro + geom_bar(aes(fill=TYPE))
wifi_boro + geom_bar(aes(fill=TYPE)) + scale_fill_brewer(palette = "Green")
wifi_boro + geom_bar(aes(fill=TYPE)) + scale_fill_brewer(palette = "Green",direction = -1)
install.packages("lubridate")
